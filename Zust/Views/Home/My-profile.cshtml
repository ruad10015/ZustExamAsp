@using Microsoft.AspNetCore.Identity;
@using Zust.Entities.Models;
@using Zust.Web.Helpers.ConstantHelpers;
@{
    var userManager = Context.RequestServices.GetService<UserManager<User>>();
    var user = await userManager.GetUserAsync(Context.User);
    ViewData["Title"] = "Zust - My Profile";
}

<link rel="stylesheet" href="~/assets//css/main.css" />

<style>
    .personal-information[contenteditable="true"] {
        outline: none;
        border: 1px solid black;
        border-radius: 4px;
        padding: 1px 5px;
        margin: 5px 0px;
        display: inline-block;
        width: 100%;
        box-sizing: border-box;
    }

    .profile-image {
        width: 250px !important;
        height: 250px !important;
        object-fit: cover !important; /* Maintain aspect ratio and cover the container */
    }

    #posts {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    video,
    .post-video,
    .image-post {
        background-color: #fcfcfc;
        max-width: 100%;
        max-height: 100%;
        width: auto; /* Ensure video width adjusts based on aspect ratio */
        height: auto; /* Ensure video height adjusts based on aspect ratio */
    }


    #posts-area {
        width: 45%;
    }

    @@media only screen and (max-width: 1000px){
        #posts-area{
            width: 100%;
        }
    }

    .fit-image {
        max-width: 100%;
        max-height: 650px; /* Adjust the height as per your requirement */
        object-fit: contain;
    }

    .post-body * {
        font-weight: bold;
    }
</style>

<div class="my-profile-inner-box" id="body">

    <div class="profile-cover-image">
        <a>
            <img src="@user.CoverImage" alt="image">
        </a>
    </div>

    <div class="profile-info-box">
        <div class="inner-info-box d-flex justify-content-between align-items-center">
            <div class="info-image">
                <a>
                    <img src="@user.ImageUrl" alt="image" class="profile-image" id="profile-image">
                </a>
                <div class="icon">
                    <a onclick="chooseMedia(event)" style="cursor: pointer;"><i class="flaticon-photo-camera"></i></a>
                </div>
            </div>
            <div class="info-text ms-3">
                <h3><a>@user.UserName</a></h3>
                <span><a id="emailElement" href="mailto:@user.Email">@user.Email</a></span>
            </div>
            <ul class="statistics">
                <li>
                    <a href="#">
                        <span class="item-number" id="post-like-count">0</span>
                        <span class="item-text">Likes</span>
                    </a>
                </li>
                <li>
                    <a href="#">
                        <span class="item-number" id="following-count">0</span>
                        <span class="item-text">Following</span>
                    </a>
                </li>
                <li>
                    <a href="#">
                        <span class="item-number" id="follower-count">0</span>
                        <span class="item-text">Followers</span>
                    </a>
                </li>
            </ul>
        </div>
        <div id="media-preview"></div>
        <input type="file" id="file-upload" style="display: none;" accept="image/*">

        <div class="profile-list-tabs">
            <ul class="nav nav-tabs" id="myTab" role="tablist">
                <li class="nav-item">
                    <a class="nav-link active" id="about-tab" data-bs-toggle="tab" href="#about" role="tab" aria-controls="about">About</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="photos-tab" data-bs-toggle="tab" href="#posts" role="tab" aria-controls="photos">My Posts</a>
                </li>
            </ul>
        </div>

        <ul class="profile-social">
            <li>
                <a href="https://www.facebook.com/" target="_blank">
                    <img src="~/assets/images/social/facebook.png" alt="image">
                </a>
            </li>
            <li>
                <a href="https://twitter.com/" target="_blank">
                    <img src="~/assets/images/social/twitter.png" alt="image">
                </a>
            </li>
            <li>
                <a href="https://www.pinterest.com/" target="_blank">
                    <img src="~/assets/images/social/pinterest.png" alt="image">
                </a>
            </li>
            <li>
                <a href="https://www.linkedin.com/" target="_blank">
                    <img src="~/assets/images/social/linkedin.png" alt="image">
                </a>
            </li>
            <li>
                <a href="https://www.instagram.com/" target="_blank">
                    <img src="~/assets/images/social/instagram.png" alt="image">
                </a>
            </li>
        </ul>
    </div>
</div>



<div class="tab-content" id="myTabContent">
    <div class="tab-pane fade show active" id="about" role="tabpanel">
        <div class="row">
            <div class="col-lg-3 col-md-12">
                <div class="about-personal-information">
                    <div class="about-header d-flex justify-content-between align-items-center">
                        <div class="title">Personal Information</div>
                    </div>

                    <ul class="information-list">
                        <li>
                            <span>Email:</span>
                            <a href="mailto:info@zust.com" class="personal-information">
                                @(string.IsNullOrEmpty(user.Email) ? Constants.NoData : user.Email)
                            </a>
                        </li>
                        <li>
                            <span>Birthday:</span>
                            <span class="personal-information">
                                @user.Birthday
                            </span>
                        </li>
                        <li>
                            <span>Occupation:</span>
                            <span class="personal-information">
                                @(string.IsNullOrEmpty(user.Occupation) ? Constants.NoData : user.Occupation)
                            </span>
                        </li>
                        <li>
                            <span>Birthplace:</span>
                            <span class="personal-information">
                                @(string.IsNullOrEmpty(user.Birthplace) ? Constants.NoData : user.Birthplace)
                            </span>
                        </li>
                        <li>
                            <span>Phone:</span>
                            @if (string.IsNullOrEmpty(user.PhoneNumber))
                            {
                                <span class="personal-information">@Constants.NoData</span>
                            }
                            else
                            {
                                <a href="@user.PhoneNumber" class="personal-information">@user.PhoneNumber</a>
                            }
                        </li>

                        <li>
                            <span>Gender:</span>
                            <span class="personal-information">
                                @(string.IsNullOrEmpty(user.Gender) ? Constants.NoData : user.Gender)
                            </span>
                        </li>
                        <li>
                            <span>Relationship Status:</span>
                            <span class="personal-information">
                                @(string.IsNullOrEmpty(user.RelationshipStatus) ? Constants.NoData : user.RelationshipStatus)
                            </span>
                        </li>
                        <li>
                            <span>Blood Group:</span>
                            <span class="personal-information">
                                @(string.IsNullOrEmpty(user.BloodGroup) ? Constants.NoData : user.BloodGroup)
                            </span>
                        </li>
                        <li>
                            <span>Website:</span>
                            @if (string.IsNullOrEmpty(user.Website))
                            {
                                <span class="personal-information">@Constants.NoData</span>
                            }
                            else
                            {
                                <a href="@user.Website" class="personal-information">@user.Website</a>
                            }
                        </li>

                        <li>
                            <span>Social Link:</span>
                            @if (string.IsNullOrEmpty(user.SocialLink))
                            {
                                <span class="personal-information">@Constants.NoData</span>
                            }
                            else
                            {
                                <a href="@user.SocialLink" class="personal-information">@user.SocialLink</a>
                            }
                        </li>

                        <li>
                            <span>Languages:</span>
                            <span class="personal-information">
                                @(string.IsNullOrEmpty(user.Languages) ? Constants.NoData : user.Languages)
                            </span>
                        </li>
                    </ul>
                </div>
            </div>

            <div class="col-lg-9 col-md-12">
                <div class="about-details-information">
                    <!-- About Me -->
                    <div class="information-box-content">
                        <div class="information-header d-flex justify-content-between align-items-center">
                            <div class="title">About Me!</div>
                            <div class="dropdown" id="dropdown"></div>
                        </div>
                        <div class="content">
                            <p class="personal-information">
                                @(string.IsNullOrEmpty(user.AboutMe) ? Constants.NoData : user.AboutMe)
                            </p>
                        </div>
                    </div>

                    <!-- Education & Work -->
                    <div class="information-box-content">
                        <div class="information-header d-flex justify-content-between align-items-center">
                            <div class="title">Education & Work</div>
                        </div>
                        <div class="box-content">
                            <p class="personal-information">
                                @(string.IsNullOrEmpty(user.EducationWork) ? Constants.NoData : user.EducationWork)
                            </p>
                        </div>
                    </div>

                    <!-- Interests -->
                    <div class="information-box-content">
                        <div class="information-header d-flex justify-content-between align-items-center">
                            <div class="title">Interests</div>
                        </div>
                        <div class="box-content">
                            <p class="personal-information">
                                @(string.IsNullOrEmpty(user.Interests) ? Constants.NoData : user.Interests)
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="tab-pane fade" id="posts" role="tabpanel">

        <div class="news-feed-area" id="posts-area"></div>
    </div>
</div>

<script src="~/assets/js/jquery.min.js"></script>
<script src="~/assets/js/functions.js"></script>
<script>
    localStorage.setItem('activeMenuItem', '#7');

    var currentUserId = '@user.Id.ToString()';

    setSocialCounts("follower-count", "following-count", "post-like-count", currentUserId);

    // HTML template for the save button
    //var btnHtml = `
    //                                        <button id="saveBtn" class="btn btn-primary" disabled onclick="save()">
    //                                            Save Changes
    //                                        </button>`;

    //// HTML template for the save button
    //var cancelHtml = `
    //                                            <button class="btn btn-secondary" onclick="cancel()">
    //                                                Cancel Changes
    //                                            </button>`;


    //// HTML template for the edit link
    //var editHtml = `
    //                                        <a id="editText" class="dropdown-item d-flex align-items-center" onclick="openEdit()" style="cursor:pointer;">
    //                                            <i class="flaticon-edit"></i> Edit Information
    //                                        </a>`;

    // Get the dropdown element and set its content to the edit link
    //var dropdown = document.getElementById("dropdown");
    //dropdown.innerHTML = editHtml;

    // Get all the elements with the "personal-information" class
    //const editableElements = document.getElementsByClassName("personal-information");

    // Declare the save button variable
    //var saveButton;

    // Function to open the edit mode
    //function openEdit() {
    //    // Enable editing for all editable elements
    //    for (let i = 0; i < editableElements.length; i++) {
    //        const element = editableElements[i];
    //        element.contentEditable = true;
    //        element.classList.add("personal-information-editable");
    //    }

    //    // Update the dropdown content to show the save button
    //    dropdown.innerHTML = cancelHtml;
    //    dropdown.innerHTML += btnHtml;

    //    // Get the save button and attach an event listener to each editable element
    //    saveButton = document.getElementById("saveBtn");
    //    for (let i = 0; i < editableElements.length; i++) {
    //        const element = editableElements[i];
    //        element.addEventListener("input", enableSaveButton);
    //    }
    //}

    // Function to cancel changes and close the edit mode
    //function cancel() {
    //    location.reload();
    //}

    // Function to save changes and close the edit mode
    //function save() {
    //    closeEdit();

    //    var myUsername = '@user.UserName';

    //    const personalInfo = {
    //        username: myUsername,
    //        email: $('.personal-information').eq(0).text().trim(),
    //        birthday: $('.personal-information').eq(1).text().trim(),
    //        occupation: $('.personal-information').eq(2).text().trim(),
    //        birthplace: $('.personal-information').eq(3).text().trim(),
    //        phoneNumber: $('.personal-information').eq(4).text().trim(),
    //        gender: $('.personal-information').eq(5).text().trim(),
    //        relationshipStatus: $('.personal-information').eq(6).text().trim(),
    //        bloodGroup: $('.personal-information').eq(7).text().trim(),
    //        website: $('.personal-information').eq(8).text().trim(),
    //        socialLink: $('.personal-information').eq(9).text().trim(),
    //        languages: $('.personal-information').eq(10).text().trim(),
    //        aboutMe: $('p.personal-information').eq(0).text().trim(),
    //        educationWork: $('p.personal-information').eq(1).text().trim(),
    //        interests: $('p.personal-information').eq(2).text().trim()
    //    };

    //    // Make an AJAX request to update the user profile
    //    $.ajax({
    //        url: '/api/Profile/UpdateProfile',
    //        type: 'PUT',
    //        contentType: 'application/json',
    //        data: JSON.stringify(personalInfo),
    //        success: function (response) {
    //            showToast("Your profile has been successfully updated!", "green");
    //        },
    //        error: function (error) {
    //            showToast("There was an error in updating your profile!", "red");
    //        }
    //    });
    //}

    //// Function to close the edit mode
    //function closeEdit() {
    //    // Disable editing for all editable elements
    //    for (let i = 0; i < editableElements.length; i++) {
    //        const element = editableElements[i];
    //        element.contentEditable = false;
    //        element.classList.remove("personal-information-editable");
    //    }

    //    // Update the dropdown content to show the edit link
    //    dropdown.innerHTML = editHtml;

    //    // Remove the event listener when closing the edit mode
    //    dropdown.removeEventListener("input", enableSaveButton);
    //}

    // Function to enable the save button when any editable element is modified
    //function enableSaveButton() {
    //    saveButton.disabled = false;
    //}


    // Get My Posts
    function getMyPosts() {
        return new Promise(function (resolve, reject) {
            $.ajax({
                url: '/api/Post/GetAllPostsOfUser?userId=' + currentUserId,
                type: 'GET',
                success: function (response) {
                    resolve(response);
                },
                error: function (xhr, status, error) {
                    reject(new Error(xhr.responseText));
                }
            });
        });
    }

    function createPostHtml(post) {
        var content = '';

        if (post.hasMediaContent && !post.isVideo) {
            content = `
                                <div class="image-post" style="display:flex; justify-content: center;">
                                    <img src="${post.contentUrl}" alt="image" class="fit-image">
                                </div>
                            `;
        }
        else if (post.hasMediaContent && post.isVideo) {
            content = `
                              <div class="post-video">
                                   <video src="${post.contentUrl}" controls></video>
                              </div>
                            `;
        }

        var dateDiff = getDateTimeDifference(post.createdAt);

        var html = `
                                <div class="news-feed news-feed-post" onclick="window.location.href = '/home/posts?id=${post.id}'" style="cursor: pointer;">
                                <div class="post-header d-flex justify-content-between align-items-center">
                                    <div>
                                        <a href="/home/my-profile">
                                            <img src="${post.user.imageUrl}" alt="image" class="profile-image" style="max-height: 80px !important; max-width: 80px !important; border-radius: 50%;">
                                        </a>
                                    </div>
                                    <div class="info ms-3">
                                        <span class="name"><a href="/home/my-profile">${post.user.userName}</a></span>
                                        <span class="small-text"><a>${dateDiff}</a></span>
                                    </div>
                                </div>

                                <div class="post-body">
                                    <p>${post.description}</p>
                                    ${content}
                                </div>
                            </div>

                            <hr/>`;
        return html;
    }

    var container = document.getElementById("posts-area");
    async function addPostsToView() {
        var posts = await getMyPosts();
        if (posts != null && posts.length > 0) {
            posts.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt)).reverse();
            var content = '';
            for (var i = 0; i < posts.length; i++) {
                var post = posts[i];
                var html = createPostHtml(post);
                content += html;
            }
            container.innerHTML = content;
        }
        else {
            var noResult = getNoResultHtml("Oops! No posts found.", "Start sharing your amazing posts for others to enjoy!")
            container.innerHTML = noResult;
        }
    }

    function chooseMedia(event) {
        event.preventDefault();

        const fileUpload = document.getElementById('file-upload');
        const mediaPreview = document.getElementById('media-preview');

        fileUpload.onchange = function (event) {
            const file = event.target.files[0];
            const reader = new FileReader();

            // Input validation
            if (!file) {
                showToast("Please select an image to upload.", "red");
                return;
            }

            // Check if the selected file is an image
            if (!file.type.startsWith('image/')) {
                showToast("Please select an image file.", "red");
                return;
            }

            reader.onload = function (e) {
                // Display the selected image in the preview
                const profileImage = document.getElementById('profile-image');
                profileImage.src = e.target.result;

                // Create FormData object to send the image and the userId as data
                const formData = new FormData();
                formData.append('MediaFile', file);
                formData.append('UserId', currentUserId);

                // Send the data using jQuery Ajax
                $.ajax({
                    url: '/api/User/UpdateProfileImage', // Update this URL with the correct API endpoint
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        showToast("Profile image updated successfully!", "green");
                    },
                    error: function (xhr, status, error) {
                        showToast("Error updating profile image: " + error, "red");
                    }
                });
            };

            reader.readAsDataURL(file);
        };

        fileUpload.click();
    }



    addPostsToView();
</script>
