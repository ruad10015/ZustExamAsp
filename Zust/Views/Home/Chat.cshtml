@model ChatViewModel;
@{
    ViewData["Title"] = "Zust - Chat";

    // Group messages by date
    var messagesByDate = Model.Chat.Messages
        .GroupBy(m => m.DateSent.Date)
        .OrderBy(g => g.Key);
}

<style>
    #messages {
        min-height: 550px !important;
        max-height: 550px !important;
        overflow-y: scroll;
        padding: 10px;
    }

    .all-messages-body {
        width: 600px;
        padding-top: 0px;
    }

    @@media only screen and (max-width: 800px) {
        .all-messages-body {
            width: 100% !important;
        }
    }

    .chat-content::-webkit-scrollbar {
        width: 8px; /* Width of the scrollbar */
    }

    .chat-content::-webkit-scrollbar-thumb {
        background-color: #888; /* Color of the scrollbar thumb (the draggable part) */
        border-radius: 4px; /* Border radius of the scrollbar thumb */
    }

    .chat-content::-webkit-scrollbar-thumb:hover {
            background-color: #555; /* Color of the scrollbar thumb when hovered */
        }

    /* Hide scrollbar for Firefox */
    .chat-content {
        scrollbar-width: thin;
        scrollbar-color: #888 #f5f5f5;
    }

    .chat-content::-webkit-scrollbar-track {
            background: #f5f5f5; /* Color of the scrollbar track */
        }

     #profile-image{
        max-width: 120px !important;
        max-height: 120px !important;
        min-height: 120px !important;
        min-width: 120px !important;
        width: 120px !important;
        height: 120px !important;
    }

    .myimg{
        width: 50px;
        height: 50px;
        min-height: 50px;
        max-height: 50px;
        max-width: 50px;
        min-width: 50px;
    }
</style>

<div class="all-messages-body">
    <div class="all-messages-header d-flex justify-content-between align-items-center">
        <h3>Chat</h3>
    </div>

    <div class="messages-profile-box">
        <a href="/home/users?id=@Model.UserToChat.Id"><img src="@Model.UserToChat.ImageUrl" id="profile-image" class="rounded-circle" alt="image"></a>
        <h3><a href="/home/users?id=@Model.UserToChat.Id">@Model.UserToChat.UserName</a></h3>
    </div>

    <div class="messages-chat-container">
        <div class="chat-content" id="messages">
            @foreach (var group in messagesByDate)
            {
                <hr />
                <h5>@group.Key.ToString("yyyy-MM-dd")</h5> <!-- Display the date -->
                @foreach (var message in group)
                {
                    if (message.SenderUserId == Model.CurrentUser.Id)
                    {
                        @*Brings to the right*@
                        <div class="chat chat-left">
                            <div class="chat-avatar">
                                <a href="/home/my-profile" class="d-inline-block">
                                    <img src="@message.SenderUser.ImageUrl" width="50" height="50" class="rounded-circle myimg" alt="image">
                                </a>
                            </div>

                            <div class="chat-body">
                                <div class="chat-message">
                                    <p>@message.Text</p>
                                    <span class="time d-block">@message.DateSent.ToString("HH:mm")</span> <!-- Display the time -->
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="chat">
                            <div class="chat-avatar">
                                <a href="/home/users?id=@message.SenderUserId" class="d-inline-block">
                                    <img src="@message.SenderUser.ImageUrl" width="50" height="50" class="rounded-circle myimg" alt="image">
                                </a>
                            </div>

                            <div class="chat-body">
                                <div class="chat-message">
                                    <p>@message.Text</p>
                                    <span class="time d-block">@message.DateSent.ToString("HH:mm")</span> <!-- Display the time -->
                                </div>
                            </div>
                        </div>
                    }
                }
            }
        </div>

        <div class="chat-list-footer">
            <form class="d-flex align-items-center" onsubmit="sendMessage(event)">
                <input id="messageText" type="text" class="form-control" placeholder="Type your message...">

                <button class="send-btn d-inline-block">Send</button>
            </form>
        </div>
    </div>
</div>

<script src="~/assets/js/jquery.min.js"></script>
<script src="~/assets/js/functions.js"></script>
<script src="~/assets/js/signalr/dist/browser/signalr.js"></script>
<script src="~/assets/js/userHub.js"></script>

<script>
    var messagesContainer = document.getElementById("messages");

    function scrollToBottom() {
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    scrollToBottom();

    function createMyMessageHtml(message) {
        var sentDate = new Date(message.dateSent); // Convert the date to a JavaScript Date object
        var hours = sentDate.getHours().toString().padStart(2, '0'); // Get hours in two-digit format
        var minutes = sentDate.getMinutes().toString().padStart(2, '0'); // Get minutes in two-digit format

        var content = `
                 <div class="chat chat-left">
                    <div class="chat-avatar">
                        <a href="/home/my-profile" class="d-inline-block">
                            <img src="${message.senderUser.imageUrl}" width="50" height="50" class="rounded-circle myimg" alt="image">
                        </a>
                    </div>

                    <div class="chat-body">
                        <div class="chat-message">
                            <p>${message.text}</p>
                                    <span class="time d-block">${hours}:${minutes}</span>
                        </div>
                    </div>
                </div>
                `;
        return content;
    }

    function createUserMessageHtml(message) {
        var sentDate = new Date(message.dateSent); // Convert the date to a JavaScript Date object
        var hours = sentDate.getHours().toString().padStart(2, '0'); // Get hours in two-digit format
        var minutes = sentDate.getMinutes().toString().padStart(2, '0'); // Get minutes in two-digit format

        var content = `
                <div class="chat">
                    <div class="chat-avatar">
                            <a href="/home/users?id=${message.senderUserId}" class="d-inline-block">
                                <img src="${message.senderUser.imageUrl}" width="50" height="50" class="rounded-circle myimg" alt="image">
                        </a>
                    </div>
                    <div class="chat-body">
                        <div class="chat-message">
                            <p>${message.text}</p>
                                <span class="time d-block" style="right: 10px !important;">${hours}:${minutes}</span>
                        </div>
                    </div>
                </div>
            `;
        return content;
    }

    var firstMessageSent = false;

    function sendMessage(e) {
        e.preventDefault();

        var inputElement = document.getElementById("messageText");

        var messageText = inputElement.value.trim();
        if (messageText === '') {
            return;
        }

        var message = {
            senderUserId: '@Model.CurrentUser.Id.ToString()',
            receiverUserId: '@Model.UserToChat.Id.ToString()',
            text: messageText,
            chatId: '@Model.Chat.Id.ToString()'
        };

        var sendMessageViewModel = {
            message: message,
            firstMessageSent: firstMessageSent
        }

        $.ajax({
            url: "/api/Chat/AddMessage",
            type: "POST",
            data: JSON.stringify(sendMessageViewModel),
            contentType: "application/json",
            success: async function (messageNotificationVM) {
                var messageResponse = messageNotificationVM.message;
                messagesContainer.innerHTML += createMyMessageHtml(messageResponse);
                await connection.invoke("SendMessageToUser", messageResponse);
                inputElement.value = '';
                scrollToBottom();
                firstMessageSent = true;

                if (messageNotificationVM.notification != null){
                    await connection.invoke("SendCommentNotification", messageNotificationVM.notification)
                }
            },
            error: function (error) {
                inputElement.value = '';
                // Show Error
            }
        });
    }

    connection.on('ReceiveMessage', function (messageModel) {
        var html = createUserMessageHtml(messageModel);
        messagesContainer.innerHTML += html;
        scrollToBottom();
    });
</script>
