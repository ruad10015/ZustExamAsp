@model Zust.Entities.Models.Post;
@using Microsoft.AspNetCore.Identity;
@using Zust.Entities.Models;
@using Zust.Web.Helpers.ConstantHelpers;
@{
    var userManager = Context.RequestServices.GetService<UserManager<User>>();
    var currentUser = await userManager.GetUserAsync(Context.User);
    ViewData["Title"] = $"Zust - Post - ${Model.Description}";
}

<!-- Links of CSS files -->
<link rel="stylesheet" href="~/assets/css/bootstrap.min.css">
<link rel="stylesheet" href="~/assets/css/animate.min.css">
<link rel="stylesheet" href="~/assets/css/remixicon.css">
<link rel="stylesheet" href="~/assets/css/flaticon.css">
<link rel="stylesheet" href="~/assets/css/jquery-ui.min.css">
<link rel="stylesheet" href="~/assets/css/magnific-popup.min.css">
<link rel="stylesheet" href="~/assets/css/simplebar.min.css">
<link rel="stylesheet" href="~/assets/css/metismenu.min.css">
<link rel="stylesheet" href="~/assets/css/owl.carousel.min.css">
<link rel="stylesheet" href="~/assets/css/owl.theme.default.min.css">
<link rel="stylesheet" href="~/assets/css/style.css">
<link rel="stylesheet" href="~/assets/css/responsive.css">
<link rel="stylesheet" href="~/assets/css/main.css">


<style>
    #post-area {
        width: 35%;
        align-self: center;
    }

    @@media only screen and (max-width: 1000px) {
        #post-area {
            width: 100%;
        }
    }

    ul {
        list-style: none;
    }

    .number {
        margin-left: 4px;
    }

    .icon {
        margin-right: 5px;
    }

    .form-group,
    .post-footer {
        display: flex;
    }

    #like-button {
        cursor: pointer !important;
    }
</style>

<div class="news-feed justify-content-between news-feed-post" id="post-area">
    <div class="post-header d-flex align-items-center">
        <div class="image">
            <a href="/home/users?id=@Model.UserId"><img src="@Model.User.ImageUrl" style="max-height: 80px; max-width: 80px;" class="rounded-circle" alt="image"></a>
        </div>
        <div class="info ms-3" style="display: flex !important; flex-direction: column !important; justify-content: start !important;">
            <span class="name"><a href="/home/users?id=@Model.UserId">@Model.User.UserName</a></span>
            <span class="small-text"><a id="dateDiff">0</a></span>
        </div>
    </div>

    <div class="post-body">
        <p class="mt-3">@Model.Description</p>
        <div class="post-image" style="display: flex; justify-content: center;">
            @if (Model.IsVideo)
            {
                <video src="@Model.ContentUrl" controls style="max-height: 600px; max-width: 100%; width: auto; height: auto; align-self: center;"></video>
            }
            else
            {
                <img src="@Model.ContentUrl" alt="image" style="max-height: 600px;max-width: 100%; width: auto; height: auto; align-self: center;">
            }
        </div>
        <ul class="post-meta-wrap d-flex justify-content-between align-items-center mt-4">
            <li class="post-react">
                <a id="like-button" onclick="likePost()">
                    <i class="icon flaticon-like"></i>
                    <span id="like-text"></span>
                    <span class="number" id="like-count">0</span>
                </a>
            </li>
            <li class="post-comment">
                <a>
                    <i class="icon flaticon-comment"></i>
                    <span>Comment</span> 
                    <span class="number" id="comment-count">0</span>
                </a>
            </li>
            <li class="post-share">
                <a><i class="icon flaticon-share"></i><span>Share</span> <span class="number"></span></a>
            </li>
        </ul>

        <hr />

        <div class="post-comment-list" id="comments">
        </div>

        <div id="showMore" class="more-comments" style='text-align: center; margin-top: 5px; margin-bottom: 13px; cursor: pointer;'>
            <a onClick='showComments()'>More Comments+</a>
        </div>

        <form class="post-footer" onsubmit="submitComment(event)">
            <div class="footer-image">
                <a href="/home/my-profile"><img src="@currentUser.ImageUrl" style="max-height: 80px; max-width: 80px;" class="rounded-circle" alt="image"></a>
            </div>
            <div class="form-group" style="width: 100%; position: relative; padding-left: 5px;">
                <textarea id="commentText" name="message" class="form-control" placeholder="Write a comment..." style="padding-right: 40px; min-height: 60px; border-radius: 5px; color: black !important;"></textarea>
                <label style="position: absolute; right: 10px; top: 50%; transform: translateY(-50%);">
                    <button type="submit" style="border:1px solid transparent;"><i class="ri-send-plane-line"></i></button>
                </label>
            </div>
        </form>
    </div>
</div>

<script src="~/assets/js/jquery.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="~/assets/js/functions.js"></script>
<script src="~/assets/js/bootstrap.bundle.min.js"></script>
<script src="~/assets/js/jquery.magnific-popup.min.js"></script>
<script src="~/assets/js/jquery-ui.min.js"></script>
<script src="~/assets/js/simplebar.min.js"></script>
<script src="~/assets/js/metismenu.min.js"></script>
<script src="~/assets/js/owl.carousel.min.js"></script>
<script src="~/assets/js/wow.min.js"></script>
<script src="~/assets/js/main.js"></script>
<script src="~/assets/js/signalr/dist/browser/signalr.js"></script>
<script src="~/assets/js/userHub.js"></script>

<script>

    var item = document.getElementById("dateDiff");
    var createdAt = '@Model.CreatedAt';
    item.innerHTML = getDateTimeDifference(createdAt);

    var postId = '@Model.Id.ToString()';
    async function setCounts() {
        var likeCount = await makeAjaxRequest("/api/Like/GetPostLikeCount?postId=" + postId, "GET");
        document.getElementById("like-count").innerHTML = likeCount;

        var commentCount = await makeAjaxRequest(`/api/Post/GetCountOfCommentsOfPost/${postId}`, "GET")
        document.getElementById("comment-count").innerHTML = commentCount;
    }
    setCounts();

    var currentUserId = '@currentUser.Id.ToString()';
    async function setIsLiked() {
        var isLiked = await makeAjaxRequest(`/api/Like/UserLikedPost?userId=${currentUserId}&postId=${postId}`, "GET");

        var element = document.getElementById("like-text");
        if (isLiked) {
            element.innerHTML = "Unlike";
        }
        else {
            element.innerHTML = "Like";
        }
    }
    setIsLiked();

    function createCommentHtml(comment) {
        var content = `
                             <div class="comment-list mt-3">
                                    <div class="comment-image">
                                        <a href="/home/users?id=${comment.user.id}"><img src="${comment.user.imageUrl}" class="rounded-circle" alt="image" style="min-heigth:60px !important;heigth:60px !important; max-height: 60px !important; max-width:60px !important; width:60px; min-width: 60px !important; background-color: gray;"></a>
                                        <a href="/home/users?id=${comment.user.id}" style="padding-left: 10px;">${comment.user.userName}</a>
                                    </div>
                                    <div class="comment-info mt-3">
                                        <p>${comment.text}</p>
                                    </div>
                                </div>

                                <hr/>`;

        return content;
    }

    function likePost() {
        const likeButton = document.getElementById(`like-button`);

        likeButton.classList.add('liked');

        const likeCountElement = document.getElementById(`like-count`);

        var text = document.getElementById("like-text");

        if (text) {
            if (text.innerText === 'Like') {
                makeAjaxRequest(`/api/Like/LikePost?postId=${postId}`, 'POST')
                    .then(updatedLikeCount => {
                        if (likeCountElement) {
                            likeCountElement.textContent = updatedLikeCount;
                        }
                    })
                    .catch(error => {
                        alert('Error liking the post:', error);
                        likeButton.classList.toggle('liked');
                    });

                text.innerText = 'Unlike';
            } else {
                makeAjaxRequest(`/api/Like/UnlikePost?postId=${postId}`, 'POST')
                    .then(updatedLikeCount => {
                        if (likeCountElement) {
                            likeCountElement.textContent = updatedLikeCount;
                        }
                    })
                    .catch(error => {
                        alert('Error unliking the post:', error);
                        likeButton.classList.toggle('liked');
                    });
                likeButton.classList.remove("liked");
                text.innerText = 'Like';
            }
        }
    }

    var postComments = null;

    async function setPostComments() {
        var result = await makeAjaxRequest("/api/Post/GetCommentsOfPost?postId=" + postId, "GET");
        postComments = result;
    }

    var commentContainer = document.getElementById("comments");
    var takeCount = 4;
    var postCountInView = 0;

    async function showComments() {
        try {
            if (postComments === null) {
                await setPostComments();
                console.log(postComments);
            }

            if (postComments.length === 0) {
                var html = getNoResultHtml("No Comments", "This post has no comments.");
                commentContainer.innerHTML = html; // Reset the container if there are no comments
                    document.getElementById("showMore").style.display = 'none';
            } else {
                var comments = postComments.slice(postCountInView, postCountInView + takeCount);

                for (var i = 0; i < comments.length; i++) {
                    var comment = comments[i];
                    var commentHtml = createCommentHtml(comment);
                    commentContainer.innerHTML += commentHtml;
                }

                postCountInView += comments.length;

                if (postCountInView >= postComments.length) {
                    document.getElementById("showMore").style.display = 'none';
                }
            }
        } catch (error) {
            console.error("Error fetching and displaying comments:", error);
        }
    }

    showComments();

    async function makeRequest(url, method, data) {
        try {
            const response = await fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json' // Set the Content-Type header to application/json
                },
                body: JSON.stringify(data)
            });

            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            const result = await response.json();
            return result;
        } catch (error) {
            console.error('Error making AJAX request:', error);
            throw error;
        }
    }

    var spinnerHtml = `
                <div class="spinner-border text-primary" role="status" style="color:var(--main-color) !important; width:1.1rem; height:1.1rem; ">
                    <span class="sr-only"></span>
                </div>
            `;

    async function submitComment(event) {
        event.preventDefault();

        const commentTextElement = document.getElementById("commentText");
        const commentText = commentTextElement.value.trim();

        if (commentText === "") {
            return; // Don't submit an empty comment
        }

        try {
            // Make an AJAX request to submit the comment
            const response = await makeRequest("/api/Post/AddComment", "POST", {
                postId: postId,
                text: commentText,
                userId: currentUserId
            });

            // Assuming the server responds with the newly added comment
            const newComment = response.comment;

            // Reset the comment text area
            commentTextElement.value = "";

            // Create HTML for the new comment
            const newCommentHtml = createCommentHtml(newComment);

            // Insert the new comment at the beginning of the comment container
            if (postComments === null || postComments.length === 0){
                commentContainer.innerHTML = '';
            }

            commentContainer.insertAdjacentHTML("afterbegin", newCommentHtml);

            var commentCountId = `comment-count`;
            var item = document.getElementById(commentCountId);
            item.innerHTML = spinnerHtml;
            var commentCount = await makeAjaxRequest(`/api/Post/GetCountOfCommentsOfPost/${postId}`, "GET")
            item.innerHTML = commentCount;

            const notification = response.notification;

            await connection.invoke("SendCommentNotification", notification);
        } catch (error) {
            console.error("Error submitting the comment:", error);
        }
    }
</script>